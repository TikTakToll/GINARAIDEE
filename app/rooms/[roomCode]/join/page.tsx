// 'use client';
//
// import { useSearchParams } from 'next/navigation';
//
// export default function RoomLobbyPage({ params }: { params: { roomCode: string } }) {
//     const searchParams = useSearchParams();
//     const memberName = searchParams.get('memberName');
//
//     return (
//         <div
//             className="fixed inset-0 flex items-center justify-center"
//             style={{
//                 backgroundImage: `url("https://i.pinimg.com/1200x/13/75/0d/13750d8970141cab1ab2a703d950fb75.jpg")`,
//                 backgroundSize: 'cover',
//                 backgroundPosition: 'center',
//                 backgroundRepeat: 'no-repeat',
//                 backgroundColor: '#f8f7ff',
//                 overflow: 'hidden'
//             }}
//         >
//
//             <div className="bg-white p-6 rounded-lg shadow-md text-center max-w-md w-full">
//                 <h1 className="text-2xl font-bold mb-4">Code : {params.roomCode}</h1>
//                 <p className="text-lg">‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö <span className="font-semibold">{memberName}</span>!</p>
//                 <p className="text-gray-600 text-sm mt-2">‡∏£‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏≠‡∏´‡∏±‡∏ß‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£... üçú</p>
//             </div>
//         </div>
//     );
// }


//lobbyjoin
// 'use client';
//
// import { useEffect, useState, use } from 'react';
// import { useSearchParams } from 'next/navigation';
// import { getRoomInfo } from '@/services/roomService';
//
// // ‡∏£‡∏±‡∏ö params ‡πÅ‡∏ö‡∏ö Promise ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ use() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á
// export default function RoomLobbyPage({ params }: { params: Promise<{ roomCode: string }> }) {
//     const { roomCode } = use(params);
//
//     const searchParams = useSearchParams();
//     const memberName = searchParams.get('memberName') || '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ';
//
//     const [members, setMembers] = useState<string[]>([]);
//     const [selectedCategories, setSelectedCategories] = useState<string[]>([]);
//     const [isLoading, setIsLoading] = useState(true);
//
//     const categories = ['‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢', '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô', '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏Å‡∏≤‡∏´‡∏•‡∏µ', '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏µ‡∏ô', '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ù‡∏£‡∏±‡πà‡∏á'];
//
//     useEffect(() => {
//         const fetchRoomInfo = async () => {
//             try {
//                 const data = await getRoomInfo(roomCode);
//                 setMembers(data.members || []);
//                 setSelectedCategories(data.selectedCategories || []);
//             } catch (err) {
//                 console.error('Failed to fetch room info:', err);
//             } finally {
//                 setIsLoading(false);
//             }
//         };
//
//         fetchRoomInfo();
//     }, [roomCode]);
//
//     const handleCategoryChange = (category: string) => {
//         setSelectedCategories(prev =>
//             prev.includes(category)
//                 ? prev.filter(c => c !== category)
//                 : [...prev, category]
//         );
//     };
//
//     const handleRandomFood = () => {
//         if (selectedCategories.length === 0) {
//             alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏∏‡πà‡∏°');
//             return;
//         }
//         console.log('‡∏™‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å:', selectedCategories);
//         // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏£‡∏∑‡∏≠ popup ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
//     };
//
//     if (isLoading) {
//         return (
//             <div className="flex items-center justify-center h-screen">
//                 <p className="text-gray-600">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á...</p>
//             </div>
//         );
//     }
//
//     return (
//         <div
//             className="fixed inset-0 flex items-center justify-center bg-cover bg-center"
//             style={{ backgroundImage: `url("https://i.pinimg.com/1200x/13/75/0d/13750d8970141cab1ab2a703d950fb75.jpg")` }}
//         >
//             <div className="bg-white p-6 rounded-lg shadow-md text-center max-w-md w-full space-y-4">
//                 <h1 className="text-2xl font-bold">‡∏´‡πâ‡∏≠‡∏á: {roomCode}</h1>
//                 <p>‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö <span className="font-semibold">{memberName}</span>!</p>
//                 <p className="text-gray-600 text-sm">‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {members.length} ‡∏Ñ‡∏ô</p>
//
//                 <div className="text-left">
//                     <h2 className="font-semibold mb-2">‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á:</h2>
//                     <ul className="list-disc list-inside text-sm text-left">
//                         {members.map((member, index) => (
//                             <li key={index}>{member}</li>
//                         ))}
//                     </ul>
//                 </div>
//
//                 <div className="text-left">
//                     <h2 className="font-semibold mb-2">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£</h2>
//                     <div className="grid grid-cols-2 gap-2">
//                         {categories.map((cat) => (
//                             <label key={cat} className="flex items-center space-x-2">
//                                 <input
//                                     type="checkbox"
//                                     checked={selectedCategories.includes(cat)}
//                                     onChange={() => handleCategoryChange(cat)}
//                                 />
//                                 <span>{cat}</span>
//                             </label>
//                         ))}
//                     </div>
//                 </div>
//
//                 <button
//                     onClick={handleRandomFood}
//                     className="w-full bg-orange-400 text-white py-2 px-4 rounded hover:bg-orange-500 transition-all"
//                 >
//                     üé≤ ‡∏™‡∏∏‡πà‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£!
//                 </button>
//             </div>
//         </div>
//     );
// }

//Join
'use client';

import React, { useState } from 'react';
import { useRouter } from 'next/navigation';
import { joinRoom, getRoomInfo } from '@/services/roomService';

export default function JoinRoomPage() {
    const [roomCode, setRoomCode] = useState('');
    const [memberName, setMemberName] = useState('');
    const [error, setError] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const router = useRouter();

    const handleJoinRoom = async (e: React.FormEvent) => {
        e.preventDefault();

        if (!roomCode.trim()) {
            setError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏´‡πâ‡∏≠‡∏á');
            return;
        }

        if (!memberName.trim()) {
            setError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì');
            return;
        }

        setError('');
        setIsLoading(true);

        try {
            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å joinRoom ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà (POST + body)
            await joinRoom({ roomCode, memberName });

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            const room = await getRoomInfo(roomCode);

            // ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏õ
            router.push(`/rooms/${roomCode}/lobby?memberName=${encodeURIComponent(memberName)}`);
        } catch (err: any) {
            setError(err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏´‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
            console.error(err);
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <div
            className="fixed inset-0 flex items-center justify-center"
            style={{
                backgroundImage: `url("https://i.pinimg.com/1200x/13/75/0d/13750d8970141cab1ab2a703d950fb75.jpg")`,
                backgroundSize: 'cover',
                backgroundPosition: 'center',
                backgroundRepeat: 'no-repeat',
                backgroundColor: '#f8f7ff',
                overflow: 'hidden'
            }}
        >
            <div className="w-full max-w-md p-6 bg-white rounded-lg shadow-xl">
                <h1 className="text-2xl font-bold mb-6 text-center">‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏´‡πâ‡∏≠‡∏á</h1>
                <p className="text-center text-gray-600 mb-6">‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß</p>

                {error && (
                    <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
                        {error}
                    </div>
                )}

                <form onSubmit={handleJoinRoom}>
                    <div className="mb-4">
                        <label className="block text-gray-700 mb-2" htmlFor="roomCode">
                            ‡∏£‡∏´‡∏±‡∏™‡∏´‡πâ‡∏≠‡∏á
                        </label>
                        <input
                            id="roomCode"
                            type="text"
                            value={roomCode}
                            onChange={(e) => setRoomCode(e.target.value)}
                            className="w-full px-3 py-2 border rounded-md"
                            placeholder="‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏´‡πâ‡∏≠‡∏á"
                            disabled={isLoading}
                            required
                        />
                    </div>

                    <div className="mb-6">
                        <label className="block text-gray-700 mb-2" htmlFor="memberName">
                            ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
                        </label>
                        <input
                            id="memberName"
                            type="text"
                            value={memberName}
                            onChange={(e) => setMemberName(e.target.value)}
                            className="w-full px-3 py-2 border rounded-md"
                            placeholder="‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
                            disabled={isLoading}
                            required
                        />
                    </div>

                    <div className="flex flex-col space-y-3">
                        <button
                            type="submit"
                            disabled={isLoading}
                            className="w-full border-2 border-orange-300 bg-red-400 hover:bg-red-200 text-white  hover:border-orange-400 hover:text-orange-800 shadow-md hover:shadow-lg transition-all duration-300 font-medium py-2 px-4 rounded-md  cursor-pointer"
                        >
                            {isLoading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°...' : '‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏´‡πâ‡∏≠‡∏á'}
                        </button>

                        <button
                            type="button"
                            onClick={() => router.push('/')}
                            disabled={isLoading}
                            className="w-full border-2 border-orange-300 bg-orange-500 hover:bg-red-200 text-white  hover:border-orange-400 hover:text-orange-800 shadow-md hover:shadow-lg transition-all duration-300 font-medium py-2 px-4 rounded-md  cursor-pointer"
                        >
                            ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
}

