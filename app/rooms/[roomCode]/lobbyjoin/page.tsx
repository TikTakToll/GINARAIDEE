'use client';

import { useEffect, useState, use } from 'react';
import { useSearchParams } from 'next/navigation';
import { useRouter } from 'next/navigation';
import { getRoomInfo, kickMember, leaveRoom,selectFood,setMemberReady } from '@/services/roomService';


export default function RoomLobbyPage({ params }: { params: Promise<{ roomCode: string }> }) {
    const { roomCode } = use(params);
    const router = useRouter();
    const searchParams = useSearchParams();
    const memberName = searchParams.get('memberName');
    const [isReady, setIsReady] = useState(false);

    const [members, setMembers] = useState<string[]>([]);
    const [selectedMyFoods, setSelectedMyFoods] = useState<string[]>([]);
    const [owner, setOwner] = useState<string | null>(null);
    const [isLoading, setIsLoading] = useState(true);
    const [ownerUser, setOwnerUser] = useState<string>('');

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ready ‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
    const [readyStatus, setReadyStatus] = useState<Record<string, boolean>>({});

    const DEFAULT_FOOD_TYPES = [
        "‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏™‡∏±‡πà‡∏á", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß",
        "‡∏Å‡πã‡∏ß‡∏¢‡πÄ‡∏ï‡∏µ‡πã‡∏¢‡∏ß", "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°/‡∏ô‡πâ‡∏≥‡∏ú‡∏•‡πÑ‡∏°‡πâ", "‡πÄ‡∏ö‡πÄ‡∏Å‡∏≠‡∏£‡∏µ/‡πÄ‡∏Ñ‡πâ‡∏Å",
        "‡∏ä‡∏≤‡∏ö‡∏π", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏Å‡∏≤‡∏´‡∏•‡∏µ", "‡∏õ‡∏¥‡πâ‡∏á‡∏¢‡πà‡∏≤‡∏á"
    ];


    useEffect(() => {
        const fetchRoomInfo = async () => {
            try {
                const data = await getRoomInfo(roomCode);
                setMembers(data.members || []);
                // @ts-ignore
                setSelectedMyFoods(data.memberFoodSelections?.[memberName] || []);
                setOwner(data.owner || null);
                setOwnerUser(data.ownerUser);

                // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ readyStatus ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤
                setReadyStatus(data.readyStatus || {});

                // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á isReady ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏≠‡∏á ‡∏à‡∏≤‡∏Å readyStatus
                if (memberName && data.readyStatus?.[memberName] !== undefined) {
                    setIsReady(data.readyStatus[memberName]);
                }

            } catch (err) {
                console.error('Failed to fetch room info:', err);
            } finally {
                setIsLoading(false);
            }
        };

        fetchRoomInfo();
    }, [roomCode]);


    const handleKick = async (member: string) => {
        if (!confirm(`‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∞ ${member} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á?`)) return;

        try {
            await kickMember(roomCode, memberName, member);
            alert(`‡πÄ‡∏ï‡∏∞ ${member} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);
            setMembers(prev => prev.filter(m => m !== member));
        } catch (err: any) {
            alert('‡πÄ‡∏ï‡∏∞‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' + err.message);
        }
    };

    // const handleLeaveRoom = async () => {
    //     if (!confirm('‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ?')) return;
    //
    //     try {
    //         const response = await leaveRoom(roomCode, memberName);
    //         alert('‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢: ' + response.data);
    //         router.push('/');
    //     } catch (err: any) {
    //         alert('‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' + (err?.response?.data || err.message));
    //     }
    // };

    //‡πÅ‡∏Å‡πâ response.data ‡∏ó‡∏µ‡πà‡πÅ‡∏î‡∏á

    const handleLeaveRoom = async () => {
        if (!confirm('‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ?')) return;

        try {
            const response = await leaveRoom(roomCode, memberName);
            // ‡∏ñ‡πâ‡∏≤ response ‡πÄ‡∏õ‡πá‡∏ô string ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
            alert('‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢: ' + response);
            router.push('/');
        } catch (err: any) {
            alert('‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' + (err?.response?.data || err.message));
        }
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏´‡∏≤‡∏£
    const handleSelectFood = async (foodType: string) => {
        try {
            const response = await selectFood(roomCode, memberName!, foodType);

            if (response.error) {
                alert(response.error);
                return;
            }

            setSelectedMyFoods(response.selectedFoods);
        } catch (err: any) {
            alert('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' + (err?.response?.data || err.message));
        }
    };

    const handleReadyToggle = async () => {
        try {
            const newReadyStatus = !isReady; // ‚úÖ ‡∏™‡∏•‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Ready (‡∏ñ‡πâ‡∏≤ true ‚Üí false, ‡∏ñ‡πâ‡∏≤ false ‚Üí true)

            await setMemberReady(roomCode, memberName!, newReadyStatus); // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÑ‡∏õ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏á‡∏ö‡πâ‡∏≤‡∏ô

            setIsReady(newReadyStatus); // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Ready ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÉ‡∏ô state

            setReadyStatus(prev => ({ ...prev, [memberName!]: newReadyStatus })); // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï readyStatus ‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á

            if (!newReadyStatus) {
                // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Ready (newReadyStatus = false) ‚Üí ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢
                setSelectedMyFoods([]);
            }
        } catch (err: any) {
            alert('‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' + err.message);
        }
    };




    return (
        <div
            className="fixed inset-0 flex items-center justify-center bg-cover bg-center"
            style={{
                // backgroundImage: `url("https://i.pinimg.com/1200x/13/75/0d/13750d8970141cab1ab2a703d950fb75.jpg")`
                backgroundColor: '#FFEBCD',
            }}
        >
            <div className="bg-white p-6 rounded-lg shadow-md text-center max-w-md w-full space-y-4">
                <h1 className="text-2xl font-bold">‡∏´‡πâ‡∏≠‡∏á: {roomCode}</h1>
                <p>‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö <span className="font-semibold">{memberName}</span>!</p>
                <p className="text-gray-600 text-sm">‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {members.length} ‡∏Ñ‡∏ô</p>

                <div className="text-left">
                    <h2 className="font-semibold mb-2">‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á:</h2>
                    <ul className="list-disc list-inside text-sm text-left space-y-1">
                        {members.map((member, index) => {
                            const isMemberReady = readyStatus?.[member]; // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ready
                            return (
                                <li
                                    key={index}
                                    className={`flex justify-between items-center p-1 rounded ${
                                        isMemberReady ? 'border-2 border-green-500' : ''
                                    }`}
                                >
                                    <span>{member}</span>
                                    {memberName === ownerUser && member !== ownerUser && (
                                        <button
                                            onClick={() => handleKick(member)}
                                            className="text-red-500 text-xs hover:underline"
                                        >
                                            ‡πÄ‡∏ï‡∏∞
                                        </button>
                                    )}
                                </li>
                            );
                        })}
                    </ul>
                </div>
                <div className="text-left mt-4">
                    <h2 className="font-semibold mb-2">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡∏Å‡∏¥‡∏ô üçΩÔ∏è</h2>
                    <div className="flex flex-wrap gap-2">
                        {DEFAULT_FOOD_TYPES.map((type, idx) => (
                            <button
                                key={idx}
                                onClick={() => handleSelectFood(type)}
                                className={`px-3 py-1 rounded-full border ${
                                    selectedMyFoods.includes(type)
                                        ? 'bg-green-500 text-white border-green-600'
                                        : 'bg-white hover:bg-gray-100 border-gray-300'
                                } transition-all text-sm`}
                            >
                                {type}
                            </button>
                        ))}
                    </div>

                    <div className="mt-4">
                        <h3 className="text-sm font-semibold mb-1">‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß:</h3>
                        {selectedMyFoods.length > 0 ? (
                            <ul className="list-disc list-inside text-sm">
                                {selectedMyFoods.map((type, idx) => (
                                    <li key={idx}>{type}</li>
                                ))}
                            </ul>
                        ) : (
                            <p className="text-gray-500 text-sm">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏•‡∏¢ üòã</p>
                        )}
                    </div>
                </div>


                <button
                    onClick={handleReadyToggle}
                    className={`w-full py-2 px-4 rounded transition-all ${isReady ? 'bg-green-500 text-white' : 'bg-yellow-400 text-black hover:bg-yellow-500'}`}
                >
                    {isReady ? '‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß' : '‚ö™ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°'}
                </button>
                <button
                    onClick={handleLeaveRoom}
                    className="w-full bg-gray-300 text-black py-2 px-4 rounded hover:bg-gray-400 transition-all"
                >
                    üö™ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á
                </button>
                <button
                    onClick={handleLeaveRoom}
                    className="w-full bg-gray-300 text-black py-2 px-4 rounded hover:bg-gray-400 transition-all"
                >
                    üö™ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á
                </button>
            </div>
        </div>
    );
}
