
'use client';

import { useEffect, useState, use } from 'react';
import { useRouter,useSearchParams } from 'next/navigation';
import {getRoomInfo, kickMember, leaveRoom} from '@/services/roomService';


export default function RoomLobbyPage({ params }: { params: Promise<{ roomCode: string }> }) {
    const { roomCode } = use(params);
    const router = useRouter();
    const searchParams = useSearchParams();
    const memberName = searchParams.get('memberName') || '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ';

    const [members, setMembers] = useState<string[]>([]);
    const [selectedCategories, setSelectedCategories] = useState<string[]>([]);
    const [owner, setOwner] = useState<string | null>(null);
    const [isLoading, setIsLoading] = useState(true);
    const [ownerUser, setOwnerUser] = useState<string>('');


    const categories = ['‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢', '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô', '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏Å‡∏≤‡∏´‡∏•‡∏µ', '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏µ‡∏ô', '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ù‡∏£‡∏±‡πà‡∏á'];

    useEffect(() => {
        const fetchRoomInfo = async () => {
            try {
                const data = await getRoomInfo(roomCode);
                setMembers(data.members || []);
                setSelectedCategories(data.selectedCategories || []);
                setOwner(data.owner || null);
                setOwnerUser(data.ownerUser); // ‚úÖ ‡∏î‡∏∂‡∏á owner ‡∏°‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ
            } catch (err) {
                console.error('Failed to fetch room info:', err);
            } finally {
                setIsLoading(false);
            }
        };

        fetchRoomInfo();
    }, [roomCode]);

    const handleCategoryChange = (category: string) => {
        setSelectedCategories(prev =>
            prev.includes(category)
                ? prev.filter(c => c !== category)
                : [...prev, category]
        );
    };


    //‡πÄ‡∏ï‡∏∞‡∏Ñ‡∏ô
    const handleKick = async (member: string) => {
        if (!confirm(`‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∞ ${member} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á?`)) return;

        try {
            await kickMember(roomCode, memberName, member); // memberName = ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà login ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
            alert(`‡πÄ‡∏ï‡∏∞ ${member} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);
            setMembers(prev => prev.filter(m => m !== member)); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        } catch (err) {
            // @ts-ignore
            alert('‡πÄ‡∏ï‡∏∞‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' + err.message);
        }
    };


    const handleLeaveRoom = async () => {
        if (!confirm('‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ?')) return;

        try {
            const response = await leaveRoom(roomCode, memberName!);
            // @ts-ignore
            alert('‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢: ' + response.data);
            router.push('/');
        } catch (err: any) {
            alert('‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' + (err?.response?.data || err.message));
        }
    };


    const handleRandomFood = () => {
        if (selectedCategories.length === 0) {
            alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏∏‡πà‡∏°');
            return;
        }
        console.log('‡∏™‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å:', selectedCategories);
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏£‡∏∑‡∏≠ popup ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
    };

    if (isLoading) {
        return (
            <div className="flex items-center justify-center h-screen">
                <p className="text-gray-600">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á...</p>
            </div>
        );
    }

    return (
        <div
            className="fixed inset-0 flex items-center justify-center bg-cover bg-center"
            style={{ backgroundImage: `url("https://i.pinimg.com/1200x/13/75/0d/13750d8970141cab1ab2a703d950fb75.jpg")` }}
        >
            <div className="bg-white p-6 rounded-lg shadow-md text-center max-w-md w-full space-y-4">
                <h1 className="text-2xl font-bold">‡∏´‡πâ‡∏≠‡∏á: {roomCode}</h1>
                <p>‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö <span className="font-semibold">{memberName}</span>!</p>
                <p className="text-gray-600 text-sm">‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {members.length} ‡∏Ñ‡∏ô</p>

                <div className="text-left">
                    <h2 className="font-semibold mb-2">‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á:</h2>
                    <ul className="list-disc list-inside text-sm text-left space-y-1">
                        {members.map((member, index) => (
                            <li key={index} className="flex justify-between items-center">
                                <span>{member}</span>

                                {memberName === ownerUser && member !== ownerUser && (
                                    <button
                                        onClick={() => handleKick(member)}
                                        className="text-red-500 text-xs hover:underline"
                                    >
                                        ‡πÄ‡∏ï‡∏∞
                                    </button>
                                )}
                            </li>
                        ))}
                    </ul>
                </div>

                <div className="text-left">
                    <h2 className="font-semibold mb-2">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£</h2>
                    <div className="grid grid-cols-2 gap-2">
                        {categories.map((cat) => (
                            <label key={cat} className="flex items-center space-x-2">
                                <input
                                    type="checkbox"
                                    checked={selectedCategories.includes(cat)}
                                    onChange={() => handleCategoryChange(cat)}
                                />
                                <span>{cat}</span>
                            </label>
                        ))}
                    </div>
                </div>

                <button
                    onClick={handleRandomFood}
                    className="w-full bg-orange-400 text-white py-2 px-4 rounded hover:bg-orange-500 transition-all"
                >
                    üé≤ ‡∏™‡∏∏‡πà‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£!
                </button>

                <button
                    onClick={handleLeaveRoom}
                    className="w-full bg-gray-300 text-black py-2 px-4 rounded hover:bg-gray-400 transition-all"
                >
                    üö™ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á
                </button>
            </div>
        </div>
    );
}
